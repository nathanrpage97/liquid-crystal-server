"""
This type stub file was generated by pyright.
"""

import asyncio
from typing import Any, Dict, List, Optional
from .abc import AbstractResolver

__all__ = ('ThreadedResolver', 'AsyncResolver', 'DefaultResolver')
aiodns_default = False
class ThreadedResolver(AbstractResolver):
    """Use Executor for synchronous getaddrinfo() calls, which defaults to
    concurrent.futures.ThreadPoolExecutor.
    """
    def __init__(self, loop: Optional[asyncio.AbstractEventLoop] = ...) -> None:
        ...
    
    async def resolve(self, host: str, port: int = ..., family: int = ...) -> List[Dict[str, Any]]:
        ...
    
    async def close(self) -> None:
        ...
    


class AsyncResolver(AbstractResolver):
    """Use the `aiodns` package to make asynchronous DNS lookups"""
    def __init__(self, loop: Optional[asyncio.AbstractEventLoop] = ..., *args: Any, **kwargs: Any) -> None:
        ...
    
    async def resolve(self, host: str, port: int = ..., family: int = ...) -> List[Dict[str, Any]]:
        ...
    
    async def _resolve_with_query(self, host: str, port: int = ..., family: int = ...) -> List[Dict[str, Any]]:
        ...
    
    async def close(self) -> None:
        ...
    


DefaultResolver = AsyncResolver if aiodns_default else ThreadedResolver
