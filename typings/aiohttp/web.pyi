"""
This type stub file was generated by pyright.
"""

import asyncio
import logging
import socket
from typing import Awaitable, Callable, List, Optional, Type, Union
from .abc import AbstractAccessLogger
from .web_app import Application as Application, CleanupError as CleanupError
from .web_exceptions import HTTPAccepted as HTTPAccepted, HTTPBadGateway as HTTPBadGateway, HTTPBadRequest as HTTPBadRequest, HTTPClientError as HTTPClientError, HTTPConflict as HTTPConflict, HTTPCreated as HTTPCreated, HTTPError as HTTPError, HTTPException as HTTPException, HTTPExpectationFailed as HTTPExpectationFailed, HTTPFailedDependency as HTTPFailedDependency, HTTPForbidden as HTTPForbidden, HTTPFound as HTTPFound, HTTPGatewayTimeout as HTTPGatewayTimeout, HTTPGone as HTTPGone, HTTPInsufficientStorage as HTTPInsufficientStorage, HTTPInternalServerError as HTTPInternalServerError, HTTPLengthRequired as HTTPLengthRequired, HTTPMethodNotAllowed as HTTPMethodNotAllowed, HTTPMisdirectedRequest as HTTPMisdirectedRequest, HTTPMovedPermanently as HTTPMovedPermanently, HTTPMultipleChoices as HTTPMultipleChoices, HTTPNetworkAuthenticationRequired as HTTPNetworkAuthenticationRequired, HTTPNoContent as HTTPNoContent, HTTPNonAuthoritativeInformation as HTTPNonAuthoritativeInformation, HTTPNotAcceptable as HTTPNotAcceptable, HTTPNotExtended as HTTPNotExtended, HTTPNotFound as HTTPNotFound, HTTPNotImplemented as HTTPNotImplemented, HTTPNotModified as HTTPNotModified, HTTPOk as HTTPOk, HTTPPartialContent as HTTPPartialContent, HTTPPaymentRequired as HTTPPaymentRequired, HTTPPermanentRedirect as HTTPPermanentRedirect, HTTPPreconditionFailed as HTTPPreconditionFailed, HTTPPreconditionRequired as HTTPPreconditionRequired, HTTPProxyAuthenticationRequired as HTTPProxyAuthenticationRequired, HTTPRedirection as HTTPRedirection, HTTPRequestEntityTooLarge as HTTPRequestEntityTooLarge, HTTPRequestHeaderFieldsTooLarge as HTTPRequestHeaderFieldsTooLarge, HTTPRequestRangeNotSatisfiable as HTTPRequestRangeNotSatisfiable, HTTPRequestTimeout as HTTPRequestTimeout, HTTPRequestURITooLong as HTTPRequestURITooLong, HTTPResetContent as HTTPResetContent, HTTPSeeOther as HTTPSeeOther, HTTPServerError as HTTPServerError, HTTPServiceUnavailable as HTTPServiceUnavailable, HTTPSuccessful as HTTPSuccessful, HTTPTemporaryRedirect as HTTPTemporaryRedirect, HTTPTooManyRequests as HTTPTooManyRequests, HTTPUnauthorized as HTTPUnauthorized, HTTPUnavailableForLegalReasons as HTTPUnavailableForLegalReasons, HTTPUnprocessableEntity as HTTPUnprocessableEntity, HTTPUnsupportedMediaType as HTTPUnsupportedMediaType, HTTPUpgradeRequired as HTTPUpgradeRequired, HTTPUseProxy as HTTPUseProxy, HTTPVariantAlsoNegotiates as HTTPVariantAlsoNegotiates, HTTPVersionNotSupported as HTTPVersionNotSupported
from .web_fileresponse import FileResponse as FileResponse
from .web_middlewares import middleware as middleware, normalize_path_middleware as normalize_path_middleware
from .web_protocol import PayloadAccessError as PayloadAccessError, RequestHandler as RequestHandler, RequestPayloadError as RequestPayloadError
from .web_request import BaseRequest as BaseRequest, FileField as FileField, Request as Request
from .web_response import ContentCoding as ContentCoding, Response as Response, StreamResponse as StreamResponse, json_response as json_response
from .web_routedef import AbstractRouteDef as AbstractRouteDef, RouteDef as RouteDef, RouteTableDef as RouteTableDef, StaticDef as StaticDef, delete as delete, get as get, head as head, options as options, patch as patch, post as post, put as put, route as route, static as static, view as view
from .web_runner import AppRunner as AppRunner, BaseRunner as BaseRunner, BaseSite as BaseSite, GracefulExit as GracefulExit, NamedPipeSite as NamedPipeSite, ServerRunner as ServerRunner, SockSite as SockSite, TCPSite as TCPSite, UnixSite as UnixSite
from .web_server import Server as Server
from .web_urldispatcher import AbstractResource as AbstractResource, AbstractRoute as AbstractRoute, DynamicResource as DynamicResource, PlainResource as PlainResource, Resource as Resource, ResourceRoute as ResourceRoute, StaticResource as StaticResource, UrlDispatcher as UrlDispatcher, UrlMappingMatchInfo as UrlMappingMatchInfo, View as View
from .web_ws import WSMsgType as WSMsgType, WebSocketReady as WebSocketReady, WebSocketResponse as WebSocketResponse

__all__ = ('Application', 'CleanupError', 'HTTPAccepted', 'HTTPBadGateway', 'HTTPBadRequest', 'HTTPClientError', 'HTTPConflict', 'HTTPCreated', 'HTTPError', 'HTTPException', 'HTTPExpectationFailed', 'HTTPFailedDependency', 'HTTPForbidden', 'HTTPFound', 'HTTPGatewayTimeout', 'HTTPGone', 'HTTPInsufficientStorage', 'HTTPInternalServerError', 'HTTPLengthRequired', 'HTTPMethodNotAllowed', 'HTTPMisdirectedRequest', 'HTTPMovedPermanently', 'HTTPMultipleChoices', 'HTTPNetworkAuthenticationRequired', 'HTTPNoContent', 'HTTPNonAuthoritativeInformation', 'HTTPNotAcceptable', 'HTTPNotExtended', 'HTTPNotFound', 'HTTPNotImplemented', 'HTTPNotModified', 'HTTPOk', 'HTTPPartialContent', 'HTTPPaymentRequired', 'HTTPPermanentRedirect', 'HTTPPreconditionFailed', 'HTTPPreconditionRequired', 'HTTPProxyAuthenticationRequired', 'HTTPRedirection', 'HTTPRequestEntityTooLarge', 'HTTPRequestHeaderFieldsTooLarge', 'HTTPRequestRangeNotSatisfiable', 'HTTPRequestTimeout', 'HTTPRequestURITooLong', 'HTTPResetContent', 'HTTPSeeOther', 'HTTPServerError', 'HTTPServiceUnavailable', 'HTTPSuccessful', 'HTTPTemporaryRedirect', 'HTTPTooManyRequests', 'HTTPUnauthorized', 'HTTPUnavailableForLegalReasons', 'HTTPUnprocessableEntity', 'HTTPUnsupportedMediaType', 'HTTPUpgradeRequired', 'HTTPUseProxy', 'HTTPVariantAlsoNegotiates', 'HTTPVersionNotSupported', 'FileResponse', 'middleware', 'normalize_path_middleware', 'PayloadAccessError', 'RequestHandler', 'RequestPayloadError', 'BaseRequest', 'FileField', 'Request', 'ContentCoding', 'Response', 'StreamResponse', 'json_response', 'AbstractRouteDef', 'RouteDef', 'RouteTableDef', 'StaticDef', 'delete', 'get', 'head', 'options', 'patch', 'post', 'put', 'route', 'static', 'view', 'AppRunner', 'BaseRunner', 'BaseSite', 'GracefulExit', 'ServerRunner', 'SockSite', 'TCPSite', 'UnixSite', 'NamedPipeSite', 'Server', 'AbstractResource', 'AbstractRoute', 'DynamicResource', 'PlainResource', 'Resource', 'ResourceRoute', 'StaticResource', 'UrlDispatcher', 'UrlMappingMatchInfo', 'View', 'WebSocketReady', 'WebSocketResponse', 'WSMsgType', 'run_app')
async def _run_app(app: Union[Application, Awaitable[Application]], *, host: Optional[str] = ..., port: Optional[int] = ..., path: Optional[str] = ..., sock: Optional[socket.socket] = ..., shutdown_timeout: float = ..., ssl_context: Optional[SSLContext] = ..., print: Callable[..., None] = ..., backlog: int = ..., access_log_class: Type[AbstractAccessLogger] = ..., access_log_format: str = ..., access_log: Optional[logging.Logger] = ..., handle_signals: bool = ..., reuse_address: Optional[bool] = ..., reuse_port: Optional[bool] = ...) -> None:
    ...

def _cancel_all_tasks(loop: asyncio.AbstractEventLoop) -> None:
    ...

def run_app(app: Union[Application, Awaitable[Application]], *, host: Optional[str] = ..., port: Optional[int] = ..., path: Optional[str] = ..., sock: Optional[socket.socket] = ..., shutdown_timeout: float = ..., ssl_context: Optional[SSLContext] = ..., print: Callable[..., None] = ..., backlog: int = ..., access_log_class: Type[AbstractAccessLogger] = ..., access_log_format: str = ..., access_log: Optional[logging.Logger] = ..., handle_signals: bool = ..., reuse_address: Optional[bool] = ..., reuse_port: Optional[bool] = ...) -> None:
    """Run an app locally"""
    ...

def main(argv: List[str]) -> None:
    ...

if __name__ == "__main__":
    ...
