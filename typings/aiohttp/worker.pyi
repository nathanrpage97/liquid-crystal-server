"""
This type stub file was generated by pyright.
"""

import asyncio
from types import FrameType
from typing import Any
from gunicorn.workers import base

"""Async gunicorn worker for aiohttp.web"""
__all__ = ('GunicornWebWorker', 'GunicornUVLoopWebWorker', 'GunicornTokioWebWorker')
class GunicornWebWorker(base.Worker):
    DEFAULT_AIOHTTP_LOG_FORMAT = ...
    DEFAULT_GUNICORN_LOG_FORMAT = ...
    def __init__(self, *args: Any, **kw: Any) -> None:
        self.exit_code = ...
    
    def init_process(self) -> None:
        self.loop = ...
    
    def run(self) -> None:
        ...
    
    async def _run(self) -> None:
        ...
    
    def _wait_next_notify(self) -> asyncio.Future[bool]:
        ...
    
    def _notify_waiter_done(self, waiter: asyncio.Future[bool] = ...) -> None:
        ...
    
    def init_signals(self) -> None:
        ...
    
    def handle_quit(self, sig: int, frame: FrameType) -> None:
        self.alive = ...
    
    def handle_abort(self, sig: int, frame: FrameType) -> None:
        self.alive = ...
        self.exit_code = ...
    
    @staticmethod
    def _create_ssl_context(cfg: Any) -> SSLContext:
        """ Creates SSLContext instance for usage in asyncio.create_server.

        See ssl.SSLSocket.__init__ for more details.
        """
        ...
    
    def _get_valid_log_format(self, source_format: str) -> str:
        ...
    


class GunicornUVLoopWebWorker(GunicornWebWorker):
    def init_process(self) -> None:
        ...
    


class GunicornTokioWebWorker(GunicornWebWorker):
    def init_process(self) -> None:
        ...
    


