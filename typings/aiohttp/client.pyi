"""
This type stub file was generated by pyright.
"""

import asyncio
import attr
from types import SimpleNamespace, TracebackType
from typing import Any, Coroutine, Generator, Generic, Iterable, List, Mapping, Optional, Tuple, Type, TypeVar, Union
from multidict import CIMultiDict
from .abc import AbstractCookieJar
from .client_exceptions import ClientConnectionError as ClientConnectionError, ClientConnectorCertificateError as ClientConnectorCertificateError, ClientConnectorError as ClientConnectorError, ClientConnectorSSLError as ClientConnectorSSLError, ClientError as ClientError, ClientHttpProxyError as ClientHttpProxyError, ClientOSError as ClientOSError, ClientPayloadError as ClientPayloadError, ClientProxyConnectionError as ClientProxyConnectionError, ClientResponseError as ClientResponseError, ClientSSLError as ClientSSLError, ContentTypeError as ContentTypeError, InvalidURL as InvalidURL, ServerConnectionError as ServerConnectionError, ServerDisconnectedError as ServerDisconnectedError, ServerFingerprintMismatch as ServerFingerprintMismatch, ServerTimeoutError as ServerTimeoutError, TooManyRedirects as TooManyRedirects, WSServerHandshakeError as WSServerHandshakeError
from .client_reqrep import ClientRequest as ClientRequest, ClientResponse as ClientResponse, Fingerprint as Fingerprint, RequestInfo as RequestInfo
from .client_ws import ClientWebSocketResponse as ClientWebSocketResponse
from .connector import BaseConnector as BaseConnector, NamedPipeConnector as NamedPipeConnector, TCPConnector as TCPConnector, UnixConnector as UnixConnector
from .helpers import BasicAuth, DEBUG
from .http import HttpVersion
from .tracing import TraceConfig
from .typedefs import JSONEncoder, LooseCookies, LooseHeaders, StrOrURL

"""HTTP Client for asyncio."""
__all__ = ('ClientConnectionError', 'ClientConnectorCertificateError', 'ClientConnectorError', 'ClientConnectorSSLError', 'ClientError', 'ClientHttpProxyError', 'ClientOSError', 'ClientPayloadError', 'ClientProxyConnectionError', 'ClientResponseError', 'ClientSSLError', 'ContentTypeError', 'InvalidURL', 'ServerConnectionError', 'ServerDisconnectedError', 'ServerFingerprintMismatch', 'ServerTimeoutError', 'TooManyRedirects', 'WSServerHandshakeError', 'ClientRequest', 'ClientResponse', 'Fingerprint', 'RequestInfo', 'BaseConnector', 'TCPConnector', 'UnixConnector', 'NamedPipeConnector', 'ClientWebSocketResponse', 'ClientSession', 'ClientTimeout', 'request')
@attr.s(frozen=True, slots=True)
class ClientTimeout:
    total = ...
    connect = ...
    sock_read = ...
    sock_connect = ...


DEFAULT_TIMEOUT = ClientTimeout(total=5 * 60)
_RetType = TypeVar('_RetType')
class ClientSession:
    """First-class interface for making HTTP requests."""
    ATTRS = ...
    _source_traceback = ...
    def __init__(self, *, connector: Optional[BaseConnector] = ..., loop: Optional[asyncio.AbstractEventLoop] = ..., cookies: Optional[LooseCookies] = ..., headers: Optional[LooseHeaders] = ..., skip_auto_headers: Optional[Iterable[str]] = ..., auth: Optional[BasicAuth] = ..., json_serialize: JSONEncoder = ..., request_class: Type[ClientRequest] = ..., response_class: Type[ClientResponse] = ..., ws_response_class: Type[ClientWebSocketResponse] = ..., version: HttpVersion = ..., cookie_jar: Optional[AbstractCookieJar] = ..., connector_owner: bool = ..., raise_for_status: bool = ..., read_timeout: Union[float, object] = ..., conn_timeout: Optional[float] = ..., timeout: Union[object, ClientTimeout] = ..., auto_decompress: bool = ..., trust_env: bool = ..., requote_redirect_url: bool = ..., trace_configs: Optional[List[TraceConfig]] = ...) -> None:
        ...
    
    def __init_subclass__(cls: Type[ClientSession]) -> None:
        ...
    
    if DEBUG:
        def __setattr__(self, name: str, val: Any) -> None:
            ...
        
    def __del__(self, _warnings: Any = ...) -> None:
        ...
    
    def request(self, method: str, url: StrOrURL, **kwargs: Any) -> _RequestContextManager:
        """Perform HTTP request."""
        ...
    
    async def _request(self, method: str, str_or_url: StrOrURL, *, params: Optional[Mapping[str, str]] = ..., data: Any = ..., json: Any = ..., cookies: Optional[LooseCookies] = ..., headers: LooseHeaders = ..., skip_auto_headers: Optional[Iterable[str]] = ..., auth: Optional[BasicAuth] = ..., allow_redirects: bool = ..., max_redirects: int = ..., compress: Optional[str] = ..., chunked: Optional[bool] = ..., expect100: bool = ..., raise_for_status: Optional[bool] = ..., read_until_eof: bool = ..., proxy: Optional[StrOrURL] = ..., proxy_auth: Optional[BasicAuth] = ..., timeout: Union[ClientTimeout, object] = ..., verify_ssl: Optional[bool] = ..., fingerprint: Optional[bytes] = ..., ssl_context: Optional[SSLContext] = ..., ssl: Optional[Union[SSLContext, bool, Fingerprint]] = ..., proxy_headers: Optional[LooseHeaders] = ..., trace_request_ctx: Optional[SimpleNamespace] = ...) -> ClientResponse:
        ...
    
    def ws_connect(self, url: StrOrURL, *, method: str = ..., protocols: Iterable[str] = ..., timeout: float = ..., receive_timeout: Optional[float] = ..., autoclose: bool = ..., autoping: bool = ..., heartbeat: Optional[float] = ..., auth: Optional[BasicAuth] = ..., origin: Optional[str] = ..., headers: Optional[LooseHeaders] = ..., proxy: Optional[StrOrURL] = ..., proxy_auth: Optional[BasicAuth] = ..., ssl: Union[SSLContext, bool, None, Fingerprint] = ..., verify_ssl: Optional[bool] = ..., fingerprint: Optional[bytes] = ..., ssl_context: Optional[SSLContext] = ..., proxy_headers: Optional[LooseHeaders] = ..., compress: int = ..., max_msg_size: int = ...) -> _WSRequestContextManager:
        """Initiate websocket connection."""
        ...
    
    async def _ws_connect(self, url: StrOrURL, *, method: str = ..., protocols: Iterable[str] = ..., timeout: float = ..., receive_timeout: Optional[float] = ..., autoclose: bool = ..., autoping: bool = ..., heartbeat: Optional[float] = ..., auth: Optional[BasicAuth] = ..., origin: Optional[str] = ..., headers: Optional[LooseHeaders] = ..., proxy: Optional[StrOrURL] = ..., proxy_auth: Optional[BasicAuth] = ..., ssl: Union[SSLContext, bool, None, Fingerprint] = ..., verify_ssl: Optional[bool] = ..., fingerprint: Optional[bytes] = ..., ssl_context: Optional[SSLContext] = ..., proxy_headers: Optional[LooseHeaders] = ..., compress: int = ..., max_msg_size: int = ...) -> ClientWebSocketResponse:
        ...
    
    def _prepare_headers(self, headers: Optional[LooseHeaders]) -> CIMultiDict[str]:
        """ Add default headers and transform it to CIMultiDict
        """
        ...
    
    def get(self, url: StrOrURL, *, allow_redirects: bool = ..., **kwargs: Any) -> _RequestContextManager:
        """Perform HTTP GET request."""
        ...
    
    def options(self, url: StrOrURL, *, allow_redirects: bool = ..., **kwargs: Any) -> _RequestContextManager:
        """Perform HTTP OPTIONS request."""
        ...
    
    def head(self, url: StrOrURL, *, allow_redirects: bool = ..., **kwargs: Any) -> _RequestContextManager:
        """Perform HTTP HEAD request."""
        ...
    
    def post(self, url: StrOrURL, *, data: Any = ..., **kwargs: Any) -> _RequestContextManager:
        """Perform HTTP POST request."""
        ...
    
    def put(self, url: StrOrURL, *, data: Any = ..., **kwargs: Any) -> _RequestContextManager:
        """Perform HTTP PUT request."""
        ...
    
    def patch(self, url: StrOrURL, *, data: Any = ..., **kwargs: Any) -> _RequestContextManager:
        """Perform HTTP PATCH request."""
        ...
    
    def delete(self, url: StrOrURL, **kwargs: Any) -> _RequestContextManager:
        """Perform HTTP DELETE request."""
        ...
    
    async def close(self) -> None:
        """Close underlying connector.

        Release all acquired resources.
        """
        ...
    
    @property
    def closed(self) -> bool:
        """Is client session closed.

        A readonly property.
        """
        ...
    
    @property
    def connector(self) -> Optional[BaseConnector]:
        """Connector instance used for the session."""
        ...
    
    @property
    def cookie_jar(self) -> AbstractCookieJar:
        """The session cookies."""
        ...
    
    @property
    def version(self) -> Tuple[int, int]:
        """The session HTTP protocol version."""
        ...
    
    @property
    def requote_redirect_url(self) -> bool:
        """Do URL requoting on redirection handling."""
        ...
    
    @requote_redirect_url.setter
    def requote_redirect_url(self, val: bool) -> None:
        """Do URL requoting on redirection handling."""
        ...
    
    @property
    def loop(self) -> asyncio.AbstractEventLoop:
        """Session's loop."""
        ...
    
    def detach(self) -> None:
        """Detach connector from session without closing the former.

        Session is switched to closed state anyway.
        """
        ...
    
    def __enter__(self) -> None:
        ...
    
    def __exit__(self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[TracebackType]) -> None:
        ...
    
    async def __aenter__(self) -> ClientSession:
        ...
    
    async def __aexit__(self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[TracebackType]) -> None:
        ...
    


class _BaseRequestContextManager(Coroutine[Any, Any, _RetType], Generic[_RetType]):
    __slots__ = ...
    def __init__(self, coro: Coroutine[asyncio.Future[Any], None, _RetType]) -> None:
        ...
    
    def send(self, arg: None) -> asyncio.Future[Any]:
        ...
    
    def throw(self, arg: BaseException) -> None:
        ...
    
    def close(self) -> None:
        ...
    
    def __await__(self) -> Generator[Any, None, _RetType]:
        ...
    
    def __iter__(self) -> Generator[Any, None, _RetType]:
        ...
    
    async def __aenter__(self) -> _RetType:
        ...
    


class _RequestContextManager(_BaseRequestContextManager[ClientResponse]):
    async def __aexit__(self, exc_type: Optional[Type[BaseException]], exc: Optional[BaseException], tb: Optional[TracebackType]) -> None:
        ...
    


class _WSRequestContextManager(_BaseRequestContextManager[ClientWebSocketResponse]):
    async def __aexit__(self, exc_type: Optional[Type[BaseException]], exc: Optional[BaseException], tb: Optional[TracebackType]) -> None:
        ...
    


class _SessionRequestContextManager:
    __slots__ = ...
    def __init__(self, coro: Coroutine[asyncio.Future[Any], None, ClientResponse], session: ClientSession) -> None:
        ...
    
    async def __aenter__(self) -> ClientResponse:
        ...
    
    async def __aexit__(self, exc_type: Optional[Type[BaseException]], exc: Optional[BaseException], tb: Optional[TracebackType]) -> None:
        ...
    


def request(method: str, url: StrOrURL, *, params: Optional[Mapping[str, str]] = ..., data: Any = ..., json: Any = ..., headers: LooseHeaders = ..., skip_auto_headers: Optional[Iterable[str]] = ..., auth: Optional[BasicAuth] = ..., allow_redirects: bool = ..., max_redirects: int = ..., compress: Optional[str] = ..., chunked: Optional[bool] = ..., expect100: bool = ..., raise_for_status: Optional[bool] = ..., read_until_eof: bool = ..., proxy: Optional[StrOrURL] = ..., proxy_auth: Optional[BasicAuth] = ..., timeout: Union[ClientTimeout, object] = ..., cookies: Optional[LooseCookies] = ..., version: HttpVersion = ..., connector: Optional[BaseConnector] = ..., loop: Optional[asyncio.AbstractEventLoop] = ...) -> _SessionRequestContextManager:
    """Constructs and sends a request. Returns response object.
    method - HTTP method
    url - request url
    params - (optional) Dictionary or bytes to be sent in the query
      string of the new request
    data - (optional) Dictionary, bytes, or file-like object to
      send in the body of the request
    json - (optional) Any json compatible python object
    headers - (optional) Dictionary of HTTP Headers to send with
      the request
    cookies - (optional) Dict object to send with the request
    auth - (optional) BasicAuth named tuple represent HTTP Basic Auth
    auth - aiohttp.helpers.BasicAuth
    allow_redirects - (optional) If set to False, do not follow
      redirects
    version - Request HTTP version.
    compress - Set to True if request has to be compressed
       with deflate encoding.
    chunked - Set to chunk size for chunked transfer encoding.
    expect100 - Expect 100-continue response from server.
    connector - BaseConnector sub-class instance to support
       connection pooling.
    read_until_eof - Read response until eof if response
       does not have Content-Length header.
    loop - Optional event loop.
    timeout - Optional ClientTimeout settings structure, 5min
       total timeout by default.
    Usage::
      >>> import aiohttp
      >>> resp = await aiohttp.request('GET', 'http://python.org/')
      >>> resp
      <ClientResponse(python.org/) [200]>
      >>> data = await resp.read()
    """
    ...

