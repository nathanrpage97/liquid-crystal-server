"""
This type stub file was generated by pyright.
"""

import asyncio
from typing import Any, Optional
from .client_reqrep import ClientResponse
from .http import WSMessage
from .http_websocket import WebSocketWriter
from .streams import FlowControlDataQueue
from .typedefs import JSONDecoder, JSONEncoder

"""WebSocket client for asyncio."""
class ClientWebSocketResponse:
    def __init__(self, reader: FlowControlDataQueue[WSMessage], writer: WebSocketWriter, protocol: Optional[str], response: ClientResponse, timeout: float, autoclose: bool, autoping: bool, loop: asyncio.AbstractEventLoop, *, receive_timeout: Optional[float] = ..., heartbeat: Optional[float] = ..., compress: int = ..., client_notakeover: bool = ...) -> None:
        ...
    
    def _cancel_heartbeat(self) -> None:
        ...
    
    def _reset_heartbeat(self) -> None:
        ...
    
    def _send_heartbeat(self) -> None:
        ...
    
    def _pong_not_received(self) -> None:
        ...
    
    @property
    def closed(self) -> bool:
        ...
    
    @property
    def close_code(self) -> Optional[int]:
        ...
    
    @property
    def protocol(self) -> Optional[str]:
        ...
    
    @property
    def compress(self) -> int:
        ...
    
    @property
    def client_notakeover(self) -> bool:
        ...
    
    def get_extra_info(self, name: str, default: Any = ...) -> Any:
        """extra info from connection transport"""
        ...
    
    def exception(self) -> Optional[BaseException]:
        ...
    
    async def ping(self, message: bytes = ...) -> None:
        ...
    
    async def pong(self, message: bytes = ...) -> None:
        ...
    
    async def send_str(self, data: str, compress: Optional[int] = ...) -> None:
        ...
    
    async def send_bytes(self, data: bytes, compress: Optional[int] = ...) -> None:
        ...
    
    async def send_json(self, data: Any, compress: Optional[int] = ..., *, dumps: JSONEncoder = ...) -> None:
        ...
    
    async def close(self, *, code: int = ..., message: bytes = ...) -> bool:
        ...
    
    async def receive(self, timeout: Optional[float] = ...) -> WSMessage:
        ...
    
    async def receive_str(self, *, timeout: Optional[float] = ...) -> str:
        ...
    
    async def receive_bytes(self, *, timeout: Optional[float] = ...) -> bytes:
        ...
    
    async def receive_json(self, *, loads: JSONDecoder = ..., timeout: Optional[float] = ...) -> Any:
        ...
    
    def __aiter__(self) -> ClientWebSocketResponse:
        ...
    
    async def __anext__(self) -> WSMessage:
        ...
    


