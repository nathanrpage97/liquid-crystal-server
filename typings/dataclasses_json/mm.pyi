"""
This type stub file was generated by pyright.
"""

import typing
import sys
from datetime import datetime
from decimal import Decimal
from uuid import UUID
from marshmallow import Schema, fields

class _TimestampField(fields.Field):
    def _serialize(self, value, attr, obj, **kwargs):
        ...
    
    def _deserialize(self, value, attr, data, **kwargs):
        ...
    


class _IsoField(fields.Field):
    def _serialize(self, value, attr, obj, **kwargs):
        ...
    
    def _deserialize(self, value, attr, data, **kwargs):
        ...
    


class _UnionField(fields.Field):
    def __init__(self, desc, cls, field, *args, **kwargs):
        self.desc = ...
        self.cls = ...
        self.field = ...
    
    def _serialize(self, value, attr, obj, **kwargs):
        ...
    
    def _deserialize(self, value, attr, data, **kwargs):
        ...
    


TYPES = { typing.Mapping: fields.Mapping,typing.MutableMapping: fields.Mapping,typing.List: fields.List,typing.Dict: fields.Dict,typing.Tuple: fields.Tuple,typing.Callable: fields.Function,dict: fields.Dict,list: fields.List,str: fields.Str,int: fields.Int,float: fields.Float,bool: fields.Bool,datetime: _TimestampField,UUID: fields.UUID,Decimal: fields.Decimal }
A = typing.TypeVar('A')
JsonData = typing.Union[str, bytes, bytearray]
TEncoded = typing.Dict[str, typing.Any]
TOneOrMulti = typing.Union[typing.List[A], A]
TOneOrMultiEncoded = typing.Union[typing.List[TEncoded], TEncoded]
if sys.version_info >= (3, 7):
    class SchemaF(Schema, typing.Generic[A]):
        """Lift Schema into a type constructor"""
        def __init__(self, *args, **kwargs):
            """
            Raises exception because this class should not be inherited.
            This class is helper only.
            """
            ...
        
        @typing.overload
        def dump(self, obj: typing.List[A], many: bool = ...) -> typing.List[TEncoded]:
            ...
        
        @typing.overload
        def dump(self, obj: A, many: bool = ...) -> TEncoded:
            ...
        
        def dump(self, obj: TOneOrMulti, many: bool = ...) -> TOneOrMultiEncoded:
            ...
        
        @typing.overload
        def dumps(self, obj: typing.List[A], many: bool = ..., *args, **kwargs) -> str:
            ...
        
        @typing.overload
        def dumps(self, obj: A, many: bool = ..., *args, **kwargs) -> str:
            ...
        
        def dumps(self, obj: TOneOrMulti, many: bool = ..., *args, **kwargs) -> str:
            ...
        
        @typing.overload
        def load(self, data: typing.List[TEncoded], many: bool = ..., partial: bool = ..., unknown: bool = ...) -> typing.List[A]:
            ...
        
        @typing.overload
        def load(self, data: TEncoded, many: None = ..., partial: bool = ..., unknown: bool = ...) -> A:
            ...
        
        def load(self, data: TOneOrMultiEncoded, many: bool = ..., partial: bool = ..., unknown: bool = ...) -> TOneOrMulti:
            ...
        
        @typing.overload
        def loads(self, json_data: JsonData, many: bool = ..., partial: bool = ..., unknown: bool = ..., **kwargs) -> typing.List[A]:
            ...
        
        @typing.overload
        def loads(self, json_data: JsonData, many: None = ..., partial: bool = ..., unknown: bool = ..., **kwargs) -> A:
            ...
        
        def loads(self, json_data: JsonData, many: bool = ..., partial: bool = ..., unknown: bool = ..., **kwargs) -> TOneOrMulti:
            ...
        
    
    
    SchemaType = SchemaF[A]
else:
    SchemaType = Schema
def build_type(type_, options, mixin, field, cls):
    ...

def schema(cls, mixin, infer_missing):
    ...

def build_schema(cls: typing.Type[A], mixin, infer_missing, partial) -> typing.Type[SchemaType]:
    ...

