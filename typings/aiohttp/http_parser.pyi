"""
This type stub file was generated by pyright.
"""

import abc
import asyncio
import collections
import re
import string
from enum import IntEnum
from typing import Any, List, Optional, Tuple, Type
from multidict import CIMultiDictProxy, istr
from .base_protocol import BaseProtocol
from .helpers import BaseTimerContext
from .streams import StreamReader
from .typedefs import RawHeaders

__all__ = ('HeadersParser', 'HttpParser', 'HttpRequestParser', 'HttpResponseParser', 'RawRequestMessage', 'RawResponseMessage')
ASCIISET = set(string.printable)
METHRE = re.compile(r"[!#$%&'*+\-.^_`|~0-9A-Za-z]+")
VERSRE = re.compile(r'HTTP/(\d+).(\d+)')
HDRRE = re.compile(rb'[\x00-\x1F\x7F()<>@,;:\[\]={} \t\\\\\"]')
RawRequestMessage = collections.namedtuple('RawRequestMessage', ['method', 'path', 'version', 'headers', 'raw_headers', 'should_close', 'compression', 'upgrade', 'chunked', 'url'])
RawResponseMessage = collections.namedtuple('RawResponseMessage', ['version', 'code', 'reason', 'headers', 'raw_headers', 'should_close', 'compression', 'upgrade', 'chunked'])
class ParseState(IntEnum):
    PARSE_NONE = ...
    PARSE_LENGTH = ...
    PARSE_CHUNKED = ...
    PARSE_UNTIL_EOF = ...


class ChunkState(IntEnum):
    PARSE_CHUNKED_SIZE = ...
    PARSE_CHUNKED_CHUNK = ...
    PARSE_CHUNKED_CHUNK_EOF = ...
    PARSE_MAYBE_TRAILERS = ...
    PARSE_TRAILERS = ...


class HeadersParser:
    def __init__(self, max_line_size: int = ..., max_headers: int = ..., max_field_size: int = ...) -> None:
        self.max_line_size = ...
        self.max_headers = ...
        self.max_field_size = ...
    
    def parse_headers(self, lines: List[bytes]) -> Tuple[CIMultiDictProxy[str], RawHeaders]:
        ...
    


class HttpParser(abc.ABC):
    def __init__(self, protocol: Optional[BaseProtocol] = ..., loop: Optional[asyncio.AbstractEventLoop] = ..., max_line_size: int = ..., max_headers: int = ..., max_field_size: int = ..., timer: Optional[BaseTimerContext] = ..., code: Optional[int] = ..., method: Optional[str] = ..., readall: bool = ..., payload_exception: Optional[Type[BaseException]] = ..., response_with_body: bool = ..., read_until_eof: bool = ..., auto_decompress: bool = ...) -> None:
        self.protocol = ...
        self.loop = ...
        self.max_line_size = ...
        self.max_headers = ...
        self.max_field_size = ...
        self.timer = ...
        self.code = ...
        self.method = ...
        self.readall = ...
        self.payload_exception = ...
        self.response_with_body = ...
        self.read_until_eof = ...
    
    @abc.abstractmethod
    def parse_message(self, lines: List[bytes]) -> Any:
        ...
    
    def feed_eof(self) -> Any:
        ...
    
    def feed_data(self, data: bytes, SEP: bytes = ..., EMPTY: bytes = ..., CONTENT_LENGTH: istr = ..., METH_CONNECT: str = ..., SEC_WEBSOCKET_KEY1: istr = ...) -> Tuple[List[Any], bool, bytes]:
        ...
    
    def parse_headers(self, lines: List[bytes]) -> Tuple[CIMultiDictProxy[str], RawHeaders, Optional[bool], Optional[str], bool, bool]:
        """Parses RFC 5322 headers from a stream.

        Line continuations are supported. Returns list of header name
        and value pairs. Header name is in upper case.
        """
        ...
    


class HttpRequestParser(HttpParser):
    """Read request status line. Exception .http_exceptions.BadStatusLine
    could be raised in case of any errors in status line.
    Returns RawRequestMessage.
    """
    def parse_message(self, lines: List[bytes]) -> Any:
        ...
    


class HttpResponseParser(HttpParser):
    """Read response status line and headers.

    BadStatusLine could be raised in case of any errors in status line.
    Returns RawResponseMessage"""
    def parse_message(self, lines: List[bytes]) -> Any:
        ...
    


class HttpPayloadParser:
    def __init__(self, payload: StreamReader, length: Optional[int] = ..., chunked: bool = ..., compression: Optional[str] = ..., code: Optional[int] = ..., method: Optional[str] = ..., readall: bool = ..., response_with_body: bool = ..., auto_decompress: bool = ...) -> None:
        self.done = ...
        self.payload = ...
    
    def feed_eof(self) -> None:
        ...
    
    def feed_data(self, chunk: bytes, SEP: bytes = ..., CHUNK_EXT: bytes = ...) -> Tuple[bool, bytes]:
        ...
    


class DeflateBuffer:
    """DeflateStream decompress stream and feed data into specified stream."""
    def __init__(self, out: StreamReader, encoding: Optional[str]) -> None:
        self.out = ...
        self.size = ...
        self.encoding = ...
    
    def set_exception(self, exc: BaseException) -> None:
        ...
    
    def feed_data(self, chunk: bytes, size: int) -> None:
        ...
    
    def feed_eof(self) -> None:
        ...
    
    def begin_http_chunk_receiving(self) -> None:
        ...
    
    def end_http_chunk_receiving(self) -> None:
        ...
    


HttpRequestParserPy = HttpRequestParser
HttpResponseParserPy = HttpResponseParser
RawRequestMessagePy = RawRequestMessage
RawResponseMessagePy = RawResponseMessage
