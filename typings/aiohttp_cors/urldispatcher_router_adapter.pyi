"""
This type stub file was generated by pyright.
"""

from typing import Union
from aiohttp import web
from .abc import AbstractRouterAdapter

"""AbstractRouterAdapter for aiohttp.web.UrlDispatcher.
"""
class _ResourceConfig:
    def __init__(self, default_config):
        self.default_config = ...
        self.method_config = ...
    


def _is_web_view(entity, strict: bool = ...):
    ...

class ResourcesUrlDispatcherRouterAdapter(AbstractRouterAdapter):
    """Adapter for `UrlDispatcher` for Resources-based routing only.

    Should be used with routes added in the following way:

        resource = app.router.add_resource(path)
        cors.add(resource, resource_defaults=...)
        cors.add(resource.add_route(method1, handler1), config=...)
        cors.add(resource.add_route(method2, handler2), config=...)
        cors.add(resource.add_route(method3, handler3), config=...)
    """
    def __init__(self, router: web.UrlDispatcher, defaults):
        """
        :param defaults:
            Default CORS configuration.
        """
        ...
    
    def add_preflight_handler(self, routing_entity: Union[web.Resource, web.StaticResource, web.ResourceRoute], handler):
        """Add OPTIONS handler for all routes defined by `routing_entity`.

        Does nothing if CORS handler already handles routing entity.
        Should fail if there are conflicting user-defined OPTIONS handlers.
        """
        ...
    
    def is_cors_for_resource(self, resource: web.Resource) -> bool:
        """Is CORS is configured for the resource"""
        ...
    
    def _request_route(self, request: web.Request) -> web.ResourceRoute:
        ...
    
    def _request_resource(self, request: web.Request) -> web.Resource:
        ...
    
    def is_preflight_request(self, request: web.Request) -> bool:
        """Is `request` is a CORS preflight request."""
        ...
    
    def is_cors_enabled_on_request(self, request: web.Request) -> bool:
        """Is `request` is a request for CORS-enabled resource."""
        ...
    
    def set_config_for_routing_entity(self, routing_entity: Union[web.Resource, web.StaticResource, web.ResourceRoute], config):
        """Record configuration for resource or it's route."""
        ...
    
    async def get_preflight_request_config(self, preflight_request: web.Request, origin: str, requested_method: str):
        ...
    
    def get_non_preflight_request_config(self, request: web.Request):
        """Get stored CORS configuration for routing entity that handles
        specified request."""
        ...
    


