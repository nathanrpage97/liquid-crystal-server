"""
This type stub file was generated by pyright.
"""

from typing import Any, Iterable, Optional
from .typedefs import LooseHeaders, StrOrURL
from .web_response import Response

__all__ = ('HTTPException', 'HTTPError', 'HTTPRedirection', 'HTTPSuccessful', 'HTTPOk', 'HTTPCreated', 'HTTPAccepted', 'HTTPNonAuthoritativeInformation', 'HTTPNoContent', 'HTTPResetContent', 'HTTPPartialContent', 'HTTPMultipleChoices', 'HTTPMovedPermanently', 'HTTPFound', 'HTTPSeeOther', 'HTTPNotModified', 'HTTPUseProxy', 'HTTPTemporaryRedirect', 'HTTPPermanentRedirect', 'HTTPClientError', 'HTTPBadRequest', 'HTTPUnauthorized', 'HTTPPaymentRequired', 'HTTPForbidden', 'HTTPNotFound', 'HTTPMethodNotAllowed', 'HTTPNotAcceptable', 'HTTPProxyAuthenticationRequired', 'HTTPRequestTimeout', 'HTTPConflict', 'HTTPGone', 'HTTPLengthRequired', 'HTTPPreconditionFailed', 'HTTPRequestEntityTooLarge', 'HTTPRequestURITooLong', 'HTTPUnsupportedMediaType', 'HTTPRequestRangeNotSatisfiable', 'HTTPExpectationFailed', 'HTTPMisdirectedRequest', 'HTTPUnprocessableEntity', 'HTTPFailedDependency', 'HTTPUpgradeRequired', 'HTTPPreconditionRequired', 'HTTPTooManyRequests', 'HTTPRequestHeaderFieldsTooLarge', 'HTTPUnavailableForLegalReasons', 'HTTPServerError', 'HTTPInternalServerError', 'HTTPNotImplemented', 'HTTPBadGateway', 'HTTPServiceUnavailable', 'HTTPGatewayTimeout', 'HTTPVersionNotSupported', 'HTTPVariantAlsoNegotiates', 'HTTPInsufficientStorage', 'HTTPNotExtended', 'HTTPNetworkAuthenticationRequired')
class HTTPException(Response, Exception):
    status_code = ...
    empty_body = ...
    __http_exception__ = ...
    def __init__(self, *, headers: Optional[LooseHeaders] = ..., reason: Optional[str] = ..., body: Any = ..., text: Optional[str] = ..., content_type: Optional[str] = ...) -> None:
        ...
    
    def __bool__(self) -> bool:
        ...
    


class HTTPError(HTTPException):
    """Base class for exceptions with status codes in the 400s and 500s."""
    ...


class HTTPRedirection(HTTPException):
    """Base class for exceptions with status codes in the 300s."""
    ...


class HTTPSuccessful(HTTPException):
    """Base class for exceptions with status codes in the 200s."""
    ...


class HTTPOk(HTTPSuccessful):
    status_code = ...


class HTTPCreated(HTTPSuccessful):
    status_code = ...


class HTTPAccepted(HTTPSuccessful):
    status_code = ...


class HTTPNonAuthoritativeInformation(HTTPSuccessful):
    status_code = ...


class HTTPNoContent(HTTPSuccessful):
    status_code = ...
    empty_body = ...


class HTTPResetContent(HTTPSuccessful):
    status_code = ...
    empty_body = ...


class HTTPPartialContent(HTTPSuccessful):
    status_code = ...


class _HTTPMove(HTTPRedirection):
    def __init__(self, location: StrOrURL, *, headers: Optional[LooseHeaders] = ..., reason: Optional[str] = ..., body: Any = ..., text: Optional[str] = ..., content_type: Optional[str] = ...) -> None:
        self.location = ...
    


class HTTPMultipleChoices(_HTTPMove):
    status_code = ...


class HTTPMovedPermanently(_HTTPMove):
    status_code = ...


class HTTPFound(_HTTPMove):
    status_code = ...


class HTTPSeeOther(_HTTPMove):
    status_code = ...


class HTTPNotModified(HTTPRedirection):
    status_code = ...
    empty_body = ...


class HTTPUseProxy(_HTTPMove):
    status_code = ...


class HTTPTemporaryRedirect(_HTTPMove):
    status_code = ...


class HTTPPermanentRedirect(_HTTPMove):
    status_code = ...


class HTTPClientError(HTTPError):
    ...


class HTTPBadRequest(HTTPClientError):
    status_code = ...


class HTTPUnauthorized(HTTPClientError):
    status_code = ...


class HTTPPaymentRequired(HTTPClientError):
    status_code = ...


class HTTPForbidden(HTTPClientError):
    status_code = ...


class HTTPNotFound(HTTPClientError):
    status_code = ...


class HTTPMethodNotAllowed(HTTPClientError):
    status_code = ...
    def __init__(self, method: str, allowed_methods: Iterable[str], *, headers: Optional[LooseHeaders] = ..., reason: Optional[str] = ..., body: Any = ..., text: Optional[str] = ..., content_type: Optional[str] = ...) -> None:
        self.allowed_methods = ...
        self.method = ...
    


class HTTPNotAcceptable(HTTPClientError):
    status_code = ...


class HTTPProxyAuthenticationRequired(HTTPClientError):
    status_code = ...


class HTTPRequestTimeout(HTTPClientError):
    status_code = ...


class HTTPConflict(HTTPClientError):
    status_code = ...


class HTTPGone(HTTPClientError):
    status_code = ...


class HTTPLengthRequired(HTTPClientError):
    status_code = ...


class HTTPPreconditionFailed(HTTPClientError):
    status_code = ...


class HTTPRequestEntityTooLarge(HTTPClientError):
    status_code = ...
    def __init__(self, max_size: float, actual_size: float, **kwargs: Any) -> None:
        ...
    


class HTTPRequestURITooLong(HTTPClientError):
    status_code = ...


class HTTPUnsupportedMediaType(HTTPClientError):
    status_code = ...


class HTTPRequestRangeNotSatisfiable(HTTPClientError):
    status_code = ...


class HTTPExpectationFailed(HTTPClientError):
    status_code = ...


class HTTPMisdirectedRequest(HTTPClientError):
    status_code = ...


class HTTPUnprocessableEntity(HTTPClientError):
    status_code = ...


class HTTPFailedDependency(HTTPClientError):
    status_code = ...


class HTTPUpgradeRequired(HTTPClientError):
    status_code = ...


class HTTPPreconditionRequired(HTTPClientError):
    status_code = ...


class HTTPTooManyRequests(HTTPClientError):
    status_code = ...


class HTTPRequestHeaderFieldsTooLarge(HTTPClientError):
    status_code = ...


class HTTPUnavailableForLegalReasons(HTTPClientError):
    status_code = ...
    def __init__(self, link: str, *, headers: Optional[LooseHeaders] = ..., reason: Optional[str] = ..., body: Any = ..., text: Optional[str] = ..., content_type: Optional[str] = ...) -> None:
        self.link = ...
    


class HTTPServerError(HTTPError):
    ...


class HTTPInternalServerError(HTTPServerError):
    status_code = ...


class HTTPNotImplemented(HTTPServerError):
    status_code = ...


class HTTPBadGateway(HTTPServerError):
    status_code = ...


class HTTPServiceUnavailable(HTTPServerError):
    status_code = ...


class HTTPGatewayTimeout(HTTPServerError):
    status_code = ...


class HTTPVersionNotSupported(HTTPServerError):
    status_code = ...


class HTTPVariantAlsoNegotiates(HTTPServerError):
    status_code = ...


class HTTPInsufficientStorage(HTTPServerError):
    status_code = ...


class HTTPNotExtended(HTTPServerError):
    status_code = ...


class HTTPNetworkAuthenticationRequired(HTTPServerError):
    status_code = ...


